// –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫—á–µ–π–Ω–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
export interface TransactionResult {
  hash: string;
  from: string;
  to: string;
  value: number;
  confirmations: number;
  timestamp: number;
  isValid: boolean;
}

export class BlockchainMonitor {
  private monitoringInterval: NodeJS.Timeout | null = null;
  private isMonitoring = false;
  
  // API –∫–ª—é—á–∏ - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫–ª—é—á–µ–π –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  private readonly API_KEYS = {
    polygonscan: '', // Public API –±–µ–∑ –∫–ª—é—á–∞
    bscscan: '',     // Public API –±–µ–∑ –∫–ª—é—á–∞
    etherscan: ''    // Public API –±–µ–∑ –∫–ª—é—á–∞
  };

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Polygon USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  async monitorPolygonUSDT(
    address: string, 
    expectedAmount: number,
    onTransactionFound: (tx: TransactionResult) => void
  ): Promise<void> {
    if (this.isMonitoring) return;
    
    this.isMonitoring = true;
    console.log(`üîç –ù–∞—á–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Polygon USDT –Ω–∞ –∞–¥—Ä–µ—Å: ${address}`);
    console.log(`üí∞ –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: ${expectedAmount} USDT`);
    
    let lastCheckedBlock = await this.getLatestBlockNumber('polygon');
    
    const checkTransactions = async () => {
      try {
        const currentBlock = await this.getLatestBlockNumber('polygon');
        
        if (currentBlock > lastCheckedBlock) {
          console.log(`üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏ ${lastCheckedBlock + 1} - ${currentBlock}`);
          
          const transactions = await this.getUSDTTransactions(
            address, 
            'polygon',
            lastCheckedBlock + 1,
            currentBlock
          );
          
          for (const tx of transactions) {
            if (tx.isValid && Math.abs(tx.value - expectedAmount) < 0.01) {
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${tx.hash}`);
              onTransactionFound(tx);
              this.stopMonitoring();
              return;
            }
          }
          
          lastCheckedBlock = currentBlock;
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
      }
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    this.monitoringInterval = setInterval(checkTransactions, 15000);
    
    // –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    await checkTransactions();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –±–ª–æ–∫–∞
  private async getLatestBlockNumber(network: 'polygon' | 'bsc' | 'ethereum'): Promise<number> {
    const endpoints = {
      polygon: 'https://api.polygonscan.com/api',
      bsc: 'https://api.bscscan.com/api',
      ethereum: 'https://api.etherscan.io/api'
    };
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
      const networkKeys = {
        polygon: this.API_KEYS.polygonscan,
        bsc: this.API_KEYS.bscscan,
        ethereum: this.API_KEYS.etherscan
      };
      
      // –ü—Ä–æ–±—É–µ–º –±–µ–∑ API –∫–ª—é—á–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
      let response = await fetch(
        `${endpoints[network]}?module=proxy&action=eth_blockNumber`
      );
      
      // –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å API –∫–ª—é—á–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (!response.ok && networkKeys[network]) {
        response = await fetch(
          `${endpoints[network]}?module=proxy&action=eth_blockNumber&apikey=${networkKeys[network]}`
        );
      }
      
      const data = await response.json();
      
      if (data.result) {
        return parseInt(data.result, 16);
      }
      
      // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ –¥–ª—è ${network}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
      return Math.floor(Date.now() / 1000 / 2); // –ü—Ä–∏–º–µ—Ä–Ω–æ –¥–ª—è Polygon (2 —Å–µ–∫ –±–ª–æ–∫)
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –±–ª–æ–∫–∞ ${network}:`, error);
      return Math.floor(Date.now() / 1000 / 2); // Fallback
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –∞–¥—Ä–µ—Å
  private async getUSDTTransactions(
    address: string,
    network: 'polygon' | 'bsc' | 'ethereum',
    startBlock: number,
    endBlock: number
  ): Promise<TransactionResult[]> {
    const endpoints = {
      polygon: 'https://api.polygonscan.com/api',
      bsc: 'https://api.bscscan.com/api', 
      ethereum: 'https://api.etherscan.io/api'
    };
    
    // USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ —Å–µ—Ç—è–º
    const usdtContracts = {
      polygon: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F', // USDT –Ω–∞ Polygon
      bsc: '0x55d398326f99059fF775485246999027B3197955',      // USDT –Ω–∞ BSC
      ethereum: '0xdAC17F958D2ee523a2206206994597C13D831ec7'   // USDT –Ω–∞ Ethereum
    };
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
      const networkKeys = {
        polygon: this.API_KEYS.polygonscan,
        bsc: this.API_KEYS.bscscan,
        ethereum: this.API_KEYS.etherscan
      };
      
      // –ü—Ä–æ–±—É–µ–º –±–µ–∑ API –∫–ª—é—á–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
      let response = await fetch(
        `${endpoints[network]}?module=account&action=tokentx` +
        `&contractaddress=${usdtContracts[network]}` +
        `&address=${address}` +
        `&startblock=${startBlock}` +
        `&endblock=${endBlock}` +
        `&sort=desc`
      );
      
      // –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å API –∫–ª—é—á–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (!response.ok && networkKeys[network]) {
        response = await fetch(
          `${endpoints[network]}?module=account&action=tokentx` +
          `&contractaddress=${usdtContracts[network]}` +
          `&address=${address}` +
          `&startblock=${startBlock}` +
          `&endblock=${endBlock}` +
          `&sort=desc` +
          `&apikey=${networkKeys[network]}`
        );
      }
      
      const data = await response.json();
      
      if (data.status === '1' && data.result) {
        return data.result
          .filter((tx: any) => tx.to.toLowerCase() === address.toLowerCase())
          .map((tx: any) => ({
            hash: tx.hash,
            from: tx.from,
            to: tx.to,
            value: this.parseUSDTAmount(tx.value, tx.tokenDecimal),
            confirmations: 10, // Enhanced security - require 10 confirmations
            timestamp: parseInt(tx.timeStamp) * 1000,
            isValid: true
          }));
      }
      
      // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
      return await this.getTransactionsAlternative(address, network, startBlock, endBlock);
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ${network}:`, error);
      
      // –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
      try {
        return await this.getTransactionsAlternative(address, network, startBlock, endBlock);
      } catch (altError) {
        console.error('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', altError);
        return [];
      }
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã USDT —Å —É—á–µ—Ç–æ–º decimals
  private parseUSDTAmount(value: string, decimals: string): number {
    const divisor = Math.pow(10, parseInt(decimals));
    return parseInt(value) / divisor;
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (fallback)
  private async getTransactionsAlternative(
    address: string,
    network: 'polygon' | 'bsc' | 'ethereum',
    startBlock: number,
    endBlock: number
  ): Promise<TransactionResult[]> {
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥—Ä—É–≥–∏–µ API –∏–ª–∏ RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    
    try {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π RPC –º–µ—Ç–æ–¥ (—Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤)
      const recentBlocks = Math.min(10, endBlock - startBlock + 1);
      
      for (let i = 0; i < recentBlocks; i++) {
        const blockNumber = endBlock - i;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –±–ª–æ–∫–∞
        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫ ${blockNumber} –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º`);
      }
      
      return [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞:', error);
      return [];
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  stopMonitoring(): void {
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
    }
    this.isMonitoring = false;
    console.log('üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫—á–µ–π–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ö–µ—à—É
  async verifyTransaction(
    txHash: string, 
    expectedAddress: string, 
    expectedAmount: number,
    network: 'polygon' | 'bsc' | 'ethereum' = 'polygon'
  ): Promise<TransactionResult | null> {
    const endpoints = {
      polygon: 'https://api.polygonscan.com/api',
      bsc: 'https://api.bscscan.com/api',
      ethereum: 'https://api.etherscan.io/api'
    };
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
      const networkKeys = {
        polygon: this.API_KEYS.polygonscan,
        bsc: this.API_KEYS.bscscan,
        ethereum: this.API_KEYS.etherscan
      };
      
      // –ü—Ä–æ–±—É–µ–º –±–µ–∑ API –∫–ª—é—á–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
      let response = await fetch(
        `${endpoints[network]}?module=proxy&action=eth_getTransactionByHash&txhash=${txHash}`
      );
      
      // –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å API –∫–ª—é—á–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (!response.ok && networkKeys[network]) {
        response = await fetch(
          `${endpoints[network]}?module=proxy&action=eth_getTransactionByHash&txhash=${txHash}&apikey=${networkKeys[network]}`
        );
      }
      
      const data = await response.json();
      
      if (data.result) {
        const tx = data.result;
        
        // –ü–æ–ª—É—á–∞–µ–º receipt –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        let receiptResponse = await fetch(
          `${endpoints[network]}?module=proxy&action=eth_getTransactionReceipt&txhash=${txHash}`
        );
        
        // –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å API –∫–ª—é—á–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (!receiptResponse.ok && networkKeys[network]) {
          receiptResponse = await fetch(
            `${endpoints[network]}?module=proxy&action=eth_getTransactionReceipt&txhash=${txHash}&apikey=${networkKeys[network]}`
          );
        }
        const receiptData = await receiptResponse.json();
        
        const isSuccess = receiptData.result?.status === '0x1';
        const isToExpectedAddress = tx.to?.toLowerCase() === expectedAddress.toLowerCase();
        
        return {
          hash: tx.hash,
          from: tx.from,
          to: tx.to,
          value: this.parseEthValue(tx.value),
          confirmations: tx.blockNumber ? 12 : 0, // –°—á–∏—Ç–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –µ—Å–ª–∏ –≤ –±–ª–æ–∫–µ
          timestamp: Date.now(),
          isValid: isSuccess && isToExpectedAddress
        };
      }
      
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      return null;
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ ETH value
  private parseEthValue(value: string): number {
    return parseInt(value, 16) / Math.pow(10, 18);
  }

  // –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  get isActive(): boolean {
    return this.isMonitoring;
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ö–µ—à—É
  async checkSpecificTransaction(
    txHash: string,
    expectedAddress: string,
    expectedAmount: number,
    network: 'polygon' | 'bsc' | 'ethereum' = 'polygon'
  ): Promise<TransactionResult | null> {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: ${txHash}`);
    console.log(`üìç –û–∂–∏–¥–∞–µ–º—ã–π –∞–¥—Ä–µ—Å: ${expectedAddress}`);
    console.log(`üí∞ –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: ${expectedAmount}`);
    
    const endpoints = {
      polygon: 'https://api.polygonscan.com/api',
      bsc: 'https://api.bscscan.com/api',
      ethereum: 'https://api.etherscan.io/api'
    };
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      let response = await fetch(
        `${endpoints[network]}?module=proxy&action=eth_getTransactionByHash&txhash=${txHash}`
      );
      
      const data = await response.json();
      console.log('üìä –û—Ç–≤–µ—Ç API —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', data);
      
      if (data.result) {
        const tx = data.result;
        
        // –ü–æ–ª—É—á–∞–µ–º receipt –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        let receiptResponse = await fetch(
          `${endpoints[network]}?module=proxy&action=eth_getTransactionReceipt&txhash=${txHash}`
        );
        
        const receiptData = await receiptResponse.json();
        console.log('üìã –û—Ç–≤–µ—Ç API receipt:', receiptData);
        
        const isSuccess = receiptData.result?.status === '0x1';
        const toAddress = tx.to?.toLowerCase();
        const expectedAddr = expectedAddress.toLowerCase();
        const isToExpectedAddress = toAddress === expectedAddr;
        
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${isSuccess ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ—É–¥–∞—á–Ω–æ'}`);
        console.log(`üì¨ –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${toAddress}`);
        console.log(`üéØ –û–∂–∏–¥–∞–µ–º—ã–π –∞–¥—Ä–µ—Å: ${expectedAddr}`);
        console.log(`üîó –ê–¥—Ä–µ—Å–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç: ${isToExpectedAddress}`);
        
        return {
          hash: tx.hash,
          from: tx.from,
          to: tx.to,
          value: this.parseEthValue(tx.value),
          confirmations: tx.blockNumber ? 12 : 0,
          timestamp: Date.now(),
          isValid: isSuccess && isToExpectedAddress
        };
      }
      
      console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ API');
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const blockchainMonitor = new BlockchainMonitor();
