import { useState, useEffect } from 'react';

// –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
const imagesToPreload = [
  // –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–∑ Hero —Å–ª–∞–π–¥–µ—Ä–∞
  '/images/certificates/tmo 7.JPEG',
  '/images/certificates/bg-cte.png',
  '/images/certificates/blueberry-certificate.png',
  '/images/certificates/fintokei-certificate.png',
  '/images/certificates/fivers-certificate.jpg',
  '/images/certificates/brightfunded-certificate.png',
  '/images/certificates/bg-cte.jpg',
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
  '/images/certificates/blue-guardian-certificate.png',
  '/images/certificates/ftmo-certificate.png',
  '/images/certificates/fundingpips-certificate.jpg',
  '/images/certificates/tmo 1.JPEG',
  '/images/certificates/tmo 2.JPEG',
  '/images/certificates/tmo 3.JPEG',
  '/images/certificates/tmo 4.JPEG',
  '/images/certificates/tmo 5.JPEG',
  '/images/certificates/tmo 6.JPEG',
  
  // –õ–æ–≥–æ—Ç–∏–ø—ã
  '/images/logo/yyps-logo.jpg',
  '/images/logo/Tgo.jpg',
  
  // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
  '/images/crypto/usdt.png',
  '/images/crypto/usdc.png',
  
  // –°–µ—Ç–∏
  '/images/networks/bep20.png',
  '/images/networks/polygon.png',
  '/images/networks/arbitrum.png',
  '/images/networks/optimism.png'
];

export const useImagePreloader = () => {
  const [imagesLoaded, setImagesLoaded] = useState(false);
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [loadedImages, setLoadedImages] = useState<string[]>([]);

  useEffect(() => {
    let loadedCount = 0;
    const totalImages = imagesToPreload.length;
    const loadedImagesList: string[] = [];

    const preloadImage = (src: string): Promise<void> => {
      return new Promise((resolve, reject) => {
        const img = new Image();
        
        img.onload = () => {
          loadedCount++;
          loadedImagesList.push(src);
          setLoadedImages([...loadedImagesList]);
          setLoadingProgress((loadedCount / totalImages) * 100);
          
          if (loadedCount === totalImages) {
            setImagesLoaded(true);
          }
          resolve();
        };
        
        img.onerror = () => {
          console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${src}`);
          loadedCount++;
          setLoadingProgress((loadedCount / totalImages) * 100);
          
          if (loadedCount === totalImages) {
            setImagesLoaded(true);
          }
          resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
        };
        
        img.src = src;
      });
    };

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const startPreloading = async () => {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
      
      try {
        await Promise.all(imagesToPreload.map(preloadImage));
        console.log('‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      }
    };

    startPreloading();

    // –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –≤ –∫—ç—à–µ –±—Ä–∞—É–∑–µ—Ä–∞
  }, []);

  return {
    imagesLoaded,
    loadingProgress,
    loadedImages,
    totalImages: imagesToPreload.length
  };
};

export default useImagePreloader;